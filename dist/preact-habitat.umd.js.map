{"version":3,"sources":["../src/lib.js","../src/index.js"],"names":["const","camelcasize","str","replace","all","letter","toUpperCase","getExecutedScript","document","currentScript","let","scripts","getElementsByTagName","length","collectPropsFromElement","element","defaultProps","attrs","attributes","props","Object","assign","keys","forEach","key","hasOwnProperty","dataAttrName","name","propName","split","pop","nodeValue","call","scrp","propsObj","hasAttribute","getAttribute","JSON","parse","innerHTML","e","Error","getHabitatSelectorFromClient","scriptTagAttrs","selector","widgetDOMHostElements","ref","inline","clientSpecified","hostNodes","parentNode","push","querySelectorAll","queriedTag","preactRender","widget","hostElements","root","cleanRoot","component","elm","hostNode","_habitat","window","preact","render","h","Widget","elements","loaded","clean","addEventListener"],"mappings":"4OASAA,IAAMC,GAAc,SAAAC,GAClB,MAAOA,GAAIC,QAAQ,aAAc,SAACC,EAAKC,GACrC,MAAOA,GAAOC,iBAQZC,EAAoB,WACxB,MACEC,UAASC,eACT,WACEC,GAAIC,GAAUH,SAASI,qBAAqB,SAC5C,OAAOD,GAAQA,EAAQE,OAAS,OAWhCC,EAA0B,SAACC,EAASC,qBACxCN,IAAIO,GAAQF,EAAQG,WAChBC,EAAQC,OAAOC,UAAWL,EAiC9B,OA9BAI,QAAOE,KAAKL,GAAOM,QAAQ,SAAAC,GACzB,GAAIP,EAAMQ,eAAeD,GAAM,CAC7Bd,GAAIgB,GAAeT,EAAMO,GAAKG,IAC9B,KAAKD,GAAwC,gBAAjBA,GAC1B,OAAO,CAEThB,IAAIkB,GAAWF,EAAaG,MAAM,kBAAkBC,OAAS,EAC7DF,GAAW3B,EAAY2B,GACnBF,IAAiBE,IACnBT,EAAMS,GAAYX,EAAMO,GAAKO,iBAMhCR,QAAQS,KAAKjB,EAAQH,qBAAqB,UAAW,SAAAqB,GACtDvB,GAAIwB,KACJ,IAAID,EAAKE,aAAa,QAAS,CAC7B,GAAkC,eAA9BF,EAAKG,aAAa,QACpB,MAEF,KACEF,EAAWG,KAAKC,MAAML,EAAKM,WAC3B,MAAOC,GACP,KAAM,IAAIC,OAAMD,GAElBpB,OAAOC,OAAOF,EAAOe,MAIlBf,GAGHuB,EAA+B,SAACjC,GACpCC,GAAIiC,GAAiBlC,EAAcS,WAC/B0B,EAAW,IAUf,OARAxB,QAAOE,KAAKqB,GAAgBpB,QAAQ,SAAAC,GAClC,GAAImB,EAAelB,eAAeD,GAAM,CAEjB,kBADAmB,EAAenB,GAAKG,OAEvCiB,EAAWD,EAAenB,GAAKO,cAI9Ba,GAQHC,EAAwB,SAC5BC,MAAEF,GAAQE,EAAAF,SAAEG,EAAMD,EAAAC,OAAEC,EAAeF,EAAAE,gBAE/BC,KACAxC,EAAgBF,GAEpB,KAAe,IAAXwC,EAAiB,CACnBrC,GAAIwC,GAAazC,EAAcyC,UAC/BD,GAAUE,KAAKD,GAWjB,OATwB,IAApBF,GAA6BJ,IAE/BA,EAAWF,EAA6BjC,IAEtCmC,MACCrB,QAAQS,KAAKxB,SAAS4C,iBAAiBR,GAAW,SAAAS,GACnDJ,EAAUE,KAAKE,KAGZJ,GAOHK,EAAe,SAACC,EAAQC,EAAcC,EAAMC,EAAW1C,EAAc2C,GACzEH,EAAajC,QAAQ,SAAAqC,GACnBlD,GAAImD,GAAWD,CACf,KAAIC,EAASC,SAAb,CAGAD,EAASC,UAAW,CACpBpD,IAAIS,GAAQL,EAAwB8C,EAAK5C,IAAiBA,CAa1D,OAZI0C,KACFG,EAAStB,UAAY,IAEnBoB,IACFxC,EAAM2B,IAAM,SAAUA,GACK,gBAAda,GACTI,OAAOJ,GAAab,EACU,gBAAda,IAChBvC,OAAOC,OAAOsC,EAAWb,KAIxBkB,EAAOC,OAAOD,EAAOE,EAAEX,EAAQpC,GAAQ0C,EAAUJ,aCzI5C,UAAAU,GAEdzD,GAAI6C,GAASY,CAmCb,QAASF,OA/BI,SACXnB,sDACa,qCACF,iCACD,2CACU,4EAEN,KAGdpC,IAAI0D,GAAWvB,GACbD,SAAAA,EACAG,OAAAA,EACAC,gBAAAA,IAEEqB,EAAS,WACX,GAAID,EAASvD,OAAS,EAAG,CACvBH,GAAI0D,GAAWvB,GACbD,SAAAA,EACAG,OAAAA,EACAC,gBAAAA,GAGF,OAAOM,GAAaC,EAAQa,EAzBvB,KAyBuCE,EAAOtD,EAAc2C,IAGrEU,KACA7D,SAAS+D,iBAAiB,mBAAoBF,GAC9C7D,SAAS+D,iBAAiB,OAAQF","file":"preact-habitat.umd.js","sourcesContent":["import preact from 'preact';\n\n/**\n * Removes `-` fron a string and capetalize the letter after\n * example: data-props-hello-world =>  dataPropsHelloWorld\n * Used for props passed from host DOM element\n * @param  {String} str string\n * @return {String} Capetalized string\n */\nconst camelcasize = str => {\n  return str.replace(/-([a-z])/gi, (all, letter) => {\n    return letter.toUpperCase();\n  });\n};\n\n/**\n * [getExecutedScript internal widget to provide the currently executed script]\n * @return {HTMLElement}     [script Element]\n */\nconst getExecutedScript = () => {\n  return (\n    document.currentScript ||\n    (() => {\n      let scripts = document.getElementsByTagName('script');\n      return scripts[scripts.length - 1];\n    })()\n  );\n};\n\n/**\n * Get the props from a host element's data attributes\n * @param  {Element} element The host element\n * @param  {Object}  defaultProps\n * @return {Object}  props object to be passed to the component\n */\nconst collectPropsFromElement = (element, defaultProps = {}) => {\n  let attrs = element.attributes;\n  let props = Object.assign({}, defaultProps);\n\n  // collect from element\n  Object.keys(attrs).forEach(key => {\n    if (attrs.hasOwnProperty(key)) {\n      let dataAttrName = attrs[key].name;\n      if (!dataAttrName || typeof dataAttrName !== 'string') {\n        return false;\n      }\n      let propName = dataAttrName.split(/(data-props?-)/).pop() || '';\n      propName = camelcasize(propName);\n      if (dataAttrName !== propName) {\n        props[propName] = attrs[key].nodeValue;\n      }\n    }\n  });\n\n  // check for child script text/props\n  [].forEach.call(element.getElementsByTagName('script'), scrp => {\n    let propsObj = {};\n    if (scrp.hasAttribute('type')) {\n      if (scrp.getAttribute('type') !== 'text/props') {\n        return;\n      }\n      try {\n        propsObj = JSON.parse(scrp.innerHTML);\n      } catch (e) {\n        throw new Error(e)\n      }\n      Object.assign(props, propsObj)\n    }\n  });\n\n  return props;\n};\n\nconst getHabitatSelectorFromClient = (currentScript) => {\n  let scriptTagAttrs = currentScript.attributes;\n  let selector = null;\n  // check for another props attached to the tag\n  Object.keys(scriptTagAttrs).forEach(key => {\n    if (scriptTagAttrs.hasOwnProperty(key)) {\n      const dataAttrName = scriptTagAttrs[key].name;\n      if (dataAttrName === 'data-mount-in') {\n        selector = scriptTagAttrs[key].nodeValue;\n      }\n    }\n  });\n  return selector\n};\n\n/**\n * Return array of 0 or more elements that will host our widget\n * @param  {document} scope Document object or DOM Element as a scope\n * @return {Array}    Array of matching habitats\n */\nconst widgetDOMHostElements = (\n  { selector, inline, clientSpecified }\n) => {\n  let hostNodes = [];\n  let currentScript = getExecutedScript();\n\n  if (inline === true) {\n    let parentNode = currentScript.parentNode;\n    hostNodes.push(parentNode);\n  }\n  if (clientSpecified === true && !selector) {\n    // user did not specify where to mount - get it from script tag attributes\n    selector = getHabitatSelectorFromClient(currentScript);\n  }\n  if (selector) {\n    [].forEach.call(document.querySelectorAll(selector), queriedTag => {\n      hostNodes.push(queriedTag);\n    });\n  }\n  return hostNodes;\n};\n\n/**\n * preact render function that will be queued if the DOM is not ready\n * and executed immediately if DOM is ready\n */\nconst preactRender = (widget, hostElements, root, cleanRoot, defaultProps, component) => {\n  hostElements.forEach(elm => {\n    let hostNode = elm;\n    if (hostNode._habitat) {\n      return;\n    }\n    hostNode._habitat = true;\n    let props = collectPropsFromElement(elm, defaultProps) || defaultProps;\n    if (cleanRoot) {\n      hostNode.innerHTML = '';\n    }\n    if (component) {\n      props.ref = function (ref) {\n        if (typeof component === 'string') {\n          window[component] = ref;\n        } else if (typeof component === 'object') {\n          Object.assign(component, ref);\n        }\n      };\n    }\n    return preact.render(preact.h(widget, props), hostNode, root);\n  });\n};\n\nexport {\n  collectPropsFromElement,\n  widgetDOMHostElements,\n  getExecutedScript,\n  camelcasize,\n  preactRender,\n  getHabitatSelectorFromClient\n};\n","import { preactRender, widgetDOMHostElements } from './lib';\n\nconst habitat = Widget => {\n  // Widget represents the Preact component we need to mount\n  let widget = Widget;\n  // preact root render helper\n  let root = null;\n\n  let render = (\n    {\n      selector = null,\n      inline = false,\n      clean = false,\n      clientSpecified = false,\n      defaultProps = {},\n      component = null\n    } = {}\n  ) => {\n    let elements = widgetDOMHostElements({\n      selector,\n      inline,\n      clientSpecified\n    });\n    let loaded = () => {\n      if (elements.length > 0) {\n        let elements = widgetDOMHostElements({\n          selector,\n          inline,\n          clientSpecified\n        });\n\n        return preactRender(widget, elements, root, clean, defaultProps, component);\n      }\n    };\n    loaded();\n    document.addEventListener('DOMContentLoaded', loaded);\n    document.addEventListener('load', loaded);\n  };\n\n  return { render };\n};\n\nexport default habitat;\n"]}